<!DOCTYPE html>
<html>

	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Helios </title>
		<link rel="stylesheet" href="assets/css/bootstrap.min.css?2019827" />
		<link rel="stylesheet" href="assets/css/global.css?2019827" />
		<!-- Font Awesome -->
		<link rel="stylesheet" href="assets/css/font-awesome.min.css?2019827" />
		<!-- Theme style -->
		<link rel="stylesheet" href="assets/css/AdminLTE.min.css?2019827" />
		<link rel="stylesheet" href="assets/css/skins/skin-black.min.css?2019827" />
		<link rel="stylesheet" href="assets/css/index.css?2019827">
	</head>
	<style>
		.viswCard span {
	color: #fff;
	margin-right: 0px;
	}
	.box-header .el-button--mini, .el-button--mini.is-round {
		padding: 1px 3px;
		color: #fff;
	   vertical-align: middle;
	}
	.el-input{
		vertical-align: middle;
	}
	.label-text-vm {
	    text-align: left;
	}
	.box-header.with-border {
	    padding-bottom: 14px;
	}
	.col-md-12{ padding: 0px !important;}
		
	.col-xs-2 {
	    padding: 0px !important;
	    width:19.8% !important;
	}
	.no-padding .col-xs-2:nth-child(2)  .table-bordered, .no-padding .col-xs-2:nth-child(4)  .table-bordered{
		background: #f0f9eb !important;
	} 
	 .clear{
	 	 overflow: auto;
	 	  zoom: 1;
	 	  background: #fff;
	 }
</style>

	<body>
		<!-- hold-transition skin-blue-light sidebar-mini sidebar-collapse -->
		<div class="wrapper" id="content" style="background:#f1f4f6; margin-top: 10px;">
			<div class="col-md-12" style="padding-left: 0px;">

				<div class="row">

					<!-- Light START -->
					<div class="col-md-6">
						<div class="box">
							<div class="box-header with-border">
								<h3 class="box-title">Optical</h3>
								<div class="box-tools pull-right" style="top: 9px;">
									<el-button type="primary" @click="setLight" :disabled="!Set" size="small">Set</el-button>
									<el-button size="small" @click="getLight(1)" :disabled="!Read">Read</el-button>
								</div>
							</div>
							<div class="clear" style="padding-top: 10px;">

								<el-form ref="Lightdata" label-width="220px" size="medium">
									<div class="col-md-12" v-for="(v,i) in  Lightdata">
										<el-form-item :label="v.name">
											<el-checkbox-group v-model="v.agent" size="small">
												<el-checkbox label="Agent Switch" border></el-checkbox>
											</el-checkbox-group>

											<el-checkbox-group v-model="v.enbale" size="small">
												<el-checkbox label="Enable" border></el-checkbox>
											</el-checkbox-group>
										</el-form-item>
									</div>
								</el-form>
							</div>
						</div>
					</div>
					<!-- Light END -->


					<!-- Alarm start -->
					<div class="col-md-6">
						<div class="box">
							<div class="box-header with-border">
								<h3 class="box-title">Alarm</h3>
								<div class="box-tools pull-right" style="top: 9px; right:20px;">
									<el-button @click="setAlarm" :disabled="!Set" size="small" type="primary">Set</el-button>
									<el-button @click="getAlarm(1)" :disabled="!Read" size="small">Read</el-button>
								</div>
							</div>
							<div class="clear" style="padding-top: 10px;">
								<el-form ref="Alarmdata" label-width="220px" size="medium">
									<div class="col-md-12" v-for="(v,i) in  Alarmdata">
										<el-form-item :label="v.name">
											<el-checkbox-group v-model="v.agent" size="small">
												<el-checkbox label="Agent Switch" border></el-checkbox>
											</el-checkbox-group>

											<el-checkbox-group v-model="v.enbale" size="small">
												<el-checkbox label="Enable" border></el-checkbox>
											</el-checkbox-group>
										</el-form-item>
									</div>
								</el-form>
							</div>
						</div>
					</div>
					<!-- Alarm END -->

				</div>

			</div>

		</div>
		<script type="text/javascript" src="assets/js/jquery.js"></script>
		<script type="text/javascript" src="assets/js/vue.js"></script>
		<script type="text/javascript" src="assets/js/index.js"></script>
		<script type="text/javascript" src="assets/js/comment.js"></script>

		<script type="text/javascript">
			var helios;
			let data = {
				equipment: sessionStorage.getItem("equipment"),

				Set: true,
				Read: true,
				Lightdata: [],
				Alarmdata: []
			};
			helios = new Vue({
				el: "#content",
				data: data,
				mounted() {
					$("body").resize();
				},
				beforeMount() {

					this.getLight();
					this.getAlarm();
				},

				methods: {

					getLight(c) {
						var adr = [66, 67, 68, 69, 163, 164, 165, 166, 177, 178];
						var obj = {
							"data": adr.join(),
							"action": "READ"
						};
						util.getattrajax(obj, function(data) {
							var data = data.data;
							var data1 = [];
							var data1 = [];
							if (data.length > 0) {
								if (c >= 0) {
									helios.$data.Read = false;
									setTimeout(() => {
										helios.$data.Read = true;
										toast.$message({
											message: "success",
											type: 'success',
											showClose: true,
											offset: 10
										});
									}, 1200);
								}
								for (var i = 0; i < data.length; i++) {
									if (66 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure 1", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (67 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure 2", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (68 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure 3", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (69 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure 4", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (163 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure 5", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (164 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure 6", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (165 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure 7", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (166 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure 8", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (177 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure (UL)", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (178 == data[i].adr) {
										let obj = util.ResTruefalse("Optical Transceiver Failure (DL)", data[i].adr, data[i].value);
										data1.push(obj);
									}
								}
								helios.Lightdata = data1;


							} else {
								util.error("Error：Light");
							}

						});
					},


					setLight() {
						helios.$data.Set = false;
						var adr1 = [66, 67, 68, 69, 163, 164, 165, 166, 177, 178]; // 与 新数据配对  
						var data = [];
						for (var i = 0; i < helios.Lightdata.length; i++) {
							var obj = {
								adr: "",
								value: ""
							}
							if (66 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
							if (67 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
							if (68 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
							if (69 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
							if (163 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
							if (164 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
							if (165 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
							if (166 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
							if (177 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
							if (178 == helios.Lightdata[i].adr) {
								obj.adr = helios.Lightdata[i].adr;
								obj.value = util.resnumber(helios.Lightdata[i].agent, helios.Lightdata[i].enbale);
								data.push(obj);
							}
						}


						var obj = {
							"data": JSON.stringify(data),
							"action": "SET"
						}
						util.postattrajax(obj, function(data) {
							if (1 != data) {
								toast.$message({
									message: 'Error:Alarm',
									type: 'error',
									showClose: true,
									offset: 80
								});
							} else {
								setTimeout(() => {
									helios.$data.Set = true;
									toast.$message({
										message: "success",
										type: 'success',
										showClose: true,
										offset: 40
									});
								}, 1200);
							}
						});
					},

					getAlarm(c) {
						var adr = [54, 55, 56, 57];
						var obj = {
							"data": adr.join(),
							"action": "READ"
						};

						util.getattrajax(obj, function(data) {
							var data = data.data;
							var data1 = [];
							if (data.length > 0) {
								if (c > 0) {
									helios.$data.Read = false;
									setTimeout(() => {
										helios.$data.Read = true;
										toast.$message({
											message: "success",
											type: 'success',
											showClose: true,
											offset: 10
										});
									}, 1200);
								}
								for (var i = 0; i < data.length; i++) {
									if (54 == data[i].adr) {
										let obj = util.ResTruefalse("Power Off Alarm Enable 1", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (55 == data[i].adr) {
										let obj = util.ResTruefalse("Power Failure Alarm Enable 1", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (56 == data[i].adr) {
										let obj = util.ResTruefalse("Over Temp Alarm Enable", data[i].adr, data[i].value);
										data1.push(obj);
									}
									if (57 == data[i].adr) {
										let obj = util.ResTruefalse("Door Open Alarm Enable", data[i].adr, data[i].value);
										data1.push(obj);
									}
								}
								helios.Alarmdata = data1;
							} else {
								toast.$message.error("Error");
							}
						})

					},

					setAlarm() {
						helios.$data.Set = false;
						var adr1 = [54, 55, 57, 56]; // 与 新数据配对  
						var data = [];
						for (var i = 0; i < helios.Alarmdata.length; i++) {
							var obj = {
								adr: "",
								value: ""
							}
							if (54 == helios.Alarmdata[i].adr) {
								obj.adr = helios.Alarmdata[i].adr;
								obj.value = util.resnumber(helios.Alarmdata[i].agent, helios.Alarmdata[i].enbale);
								data.push(obj);
							}
							if (55 == helios.Alarmdata[i].adr) {
								obj.adr = helios.Alarmdata[i].adr;
								obj.value = util.resnumber(helios.Alarmdata[i].agent, helios.Alarmdata[i].enbale);
								data.push(obj);
							}
							if (56 == helios.Alarmdata[i].adr) {
								obj.adr = helios.Alarmdata[i].adr;
								obj.value = util.resnumber(helios.Alarmdata[i].agent, helios.Alarmdata[i].enbale);
								data.push(obj);
							}
							if (57 == helios.Alarmdata[i].adr) {
								obj.adr = helios.Alarmdata[i].adr;
								obj.value = util.resnumber(helios.Alarmdata[i].agent, helios.Alarmdata[i].enbale);
								data.push(obj);
							}
						}


						var obj = {
							"data": JSON.stringify(data),
							"action": "SET"
						}
						util.postattrajax(obj, function(data) {
							if (1 != data) {
								toast.$message({
									message: 'Error:Alarm',
									type: 'error',
									showClose: true,
									offset: 80
								});
							} else {
								setTimeout(() => {
									helios.$data.Set = true;
									toast.$message({
										message: "success",
										type: 'success',
										showClose: true,
										offset: 40
									});
								}, 1200);
							}
						});
					},

				},

			})
		</script>
	</body>
</html>
